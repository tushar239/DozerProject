<?xml version="1.0" encoding="UTF-8"?>
<mappings xmlns="http://dozer.sourceforge.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://dozer.sourceforge.net http://dozer.sourceforge.net/schema/beanmapping.xsd">
    <mapping map-id="personMapping">
        <class-a>sample.dozer.beans.Person</class-a>
        <class-b>sample.dozer.beans.Person1</class-b>

        <field custom-converter="sample.dozer.converters.NameConverter">
            <a>name</a>
            <b>name1</b>
        </field>
        <field>
            <a>age</a>
            <b>age1</b>
        </field>
        <field>
            <a>adrs.street</a>
            <b>adrs1.street1</b>
        </field>
        <field>
            <a>adrs.city</a>
            <b>adrs1.city1</b>
        </field>
        <field>
            <a>adrs.state</a>
            <b>adrs1.state1</b>
        </field>
    </mapping>

    <!-- http://dozer.sourceforge.net/documentation/collectionandarraymapping.html -->
    <!-- relationship-type="non-cumulative"
        objects will updated if already exist in List, added if they are not present
        if you do not define custom equals() and hashCode() methods non-cumulative option will not
        function properly, as Dozer will fail to determine object equality and will rely on JDK generated
        object Ids. In default case two instances of a class are always treated as different and update will not occur.

        relationship-type="cumulative"
        objects will always be added to an existing List
        This is a default setting

        remove-orphans="true"
        Orphans are elements which exist in a destination collection that did not exist within the source collection.
        Dozer will remove orphans by calling the 'remove' method on actual orphans of the underlying destination collection;
        it will not clear all. To determine elements which are orphans dozer uses the contains() method to check if the results contains orphans.
        The default setting value is false.

        type="one-way"
        You can map class-a to class-b, vice-versa is not possible
    -->
    <mapping map-id="listBeanMapping" type="one-way" relationship-type="non-cumulative">
        <class-a>sample.dozer.beans.ListBean</class-a>
        <class-b>sample.dozer.beans.ListBean1</class-b>
        <!-- List to list mapping example -->
        <field>
            <a>adrsList</a>
            <b>adrsList1</b>
        </field>
        <!-- List to Array mapping example -->
        <field>
            <a>adrsList</a>
            <b>adrsArray1</b>
        </field>
    </mapping>

    <!-- Not sure how to make field level mapping work -->
    <mapping>
        <class-a>sample.dozer.beans.ListBean</class-a>
        <class-b>sample.dozer.beans.ListBean1</class-b>
        <!-- List to list mapping example -->
        <field map-id="fieldlLevelListBeanMapping" >
            <a>adrsList</a>
            <b>adrsList1</b>
        </field>
    </mapping>

</mappings>
